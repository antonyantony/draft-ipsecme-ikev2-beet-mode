# Do: title, toc:table-of-contents ::fixed-width-sections |tables Do: ^:sup/sub
# with curly -:special-strings *:emphasis
# Don't: prop:no-prop-drawers \n:preserve-linebreaks ':use-smart-quotes
#+OPTIONS: prop:nil title:t toc:t \n:nil ::t |:t ^:{} -:t *:t ':nil
# vim: set textwidth=69

#+RFC_CATEGORY: std
#+RFC_NAME: draft-ietf-ipsecme-ikev2-beet-mode
#+RFC_VERSION: 01
#+RFC_IPR: trust200902
#+RFC_STREAM: IETF
#+RFC_TOC_DEPTH: 4
#+RFC_XML_VERSION: 3
#+RFC_CONSENSUS: true

#+TITLE: IKEv2 negotiation for Bound End-to-End Tunnel (BEET) mode ESP
#+RFC_SHORT_TITLE: IKv2 for BEET mode ESP
#+AUTHOR: Antony Antony
#+EMAIL: antony.antony@secunet.com
#+AFFILIATION: secunet Security Networks AG
#+RFC_SHORT_ORG: secunet
#+RFC_ADD_AUTHOR: ("Steffen Klassert" "steffen.klassert@secunet.com" ("secunet" "secunet Security Networks AG"))
#+RFC_AREA: sec
#+RFC_WORKGROUP: IPSECME Working Group

#+begin_abstract
This document specifies a new Notify Message Type Payload for the
Internet Key Exchange Protocol Version 2 (IKEv2), to negotiate IPsec
ESP Bound End-to-End Tunnel (BEET) mode. BEET mode combines the
benefits of tunnel mode with reduced overhead, making it suitable for
applications requiring minimalistic end-to-end tunnels, mobility
support, and multi-address multi-homing capabilities. The
introduction of the USE_BEET_MODE Notify Message enables the
negotiation and establishment of BEET mode security associations.

#+end_abstract
#+RFC_KEYWORDS: ("IKEv2" "BEET")

* Introduction

The Bound End-to-End Tunnel (BEET) mode, as specified in Appendix B
of [[RFC7402]], offers an optimized approach for deploying IP
Security (IPsec), [RFC4301], using Encapsulating Security Payload
(ESP) [RFC4303] for end-to-end use cases. It combines the advantages of Tunnel and
Transport modes specified in [[RFC7296]], while minimizing their
overhead for end-to-end use cases.

The [[RFC7402]]does not specify necessary code points to negotiate
a ESP BEET mode SA using the Internet Key Exchange Protocol
Version 2 (IKEv2) [RFC7296]. This document fills this gap by introducing a new
Notify Message Status Type, USE_BEET_MODE, to facilitate the
negotiation and establishment of BEET mode security associations in
IKEv2.


** Background

For over a decade, a minimalist IPsec tunnel mode, BEET, has been in
use for end-to-end security in HIP environments without IKE
negotiation, [[RFC7401]]. Also, in many environments,  with IKE negotiation
using a private IKEv2 Notify Message Status Type (strongSWAN).

Additionally, BEET mode ESP is valuable for low-power devices which
usually use only one end-to-end IPsec tunnel, as it reduces power
consumption [[RFC9333]]and complexity. In situations where devices or
IPsec connections are dedicated to a single application or transport
protocol, the use of BEET mode simplifies packet processing and
conserves energy, especially benefiting lower-powered devices.


** Requirements Language

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in [[RFC2119]].


* IKEv2 Negotiation

When negotiating a Child SA using IKEv2, the initiator MUST use the
new "USE_BEET_MODE" Notify Message Status Type to request a Child SA pair with
BEET mode support. The method used is similar to how
USE_TRANSPORT_MODE is negotiated, as described in [[RFC7296]]

To request a BEET-mode SA on the Child SA pair, the initiator MUST
include the USE_BEET_MODE, Notify Message Status Type, when requesting
a new Child SA, either during the IKE_AUTH or the CREATE_CHILD_SA
exchanges to create a new Child SA. If the request is accepted, the
response MUST also include a USE_BEET_MODE Notification Message Status Type.
If the responder declines and does not include the USE_BEET_MODE notification
in the response, the child SA may be established without BEET mode enabled.
If this is unacceptable to the initiator, the initiator MUST delete the child
SA.

As the use of the USE_BEET_MODE mode payload is currently only defined
for non-transport-mode tunnels, the USE_BEET_MODE notification MUST NOT
be combined with the USE_TRANSPORT notification.


** USE_BEET_MODE Notify Message Payload

#+begin_src


0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-----------------------------+-------------------------------+
! Next Payload  !C!  RESERVED   !         Payload Length        !
+---------------+---------------+-------------------------------+
!  Protocol ID  !   SPI Size    !      Notify Message Type      !
+---------------+---------------+-------------------------------+


#+end_src

- Payload Length - MUST be 0.
- Protocol ID (1 octet) - MUST be 0. MUST be ignored if not 0.
- SPI Size (1 octet) - MUST be 0. MUST be ignored if not 0.


* IANA Considerations


This document defines a new "IKEv2 Notify Message Status Type" to be
added to the IANA registry [[STATUSNOTIFY]]

#+name: iana_requests_i
#+begin_src


      Value   Notify Message Status Type     Reference
      -----   ---------------------------    ---------------
      [TBD1]   USE_BEET_MODE                  [this document]


#+end_src

* Security Considerations

In this section we discuss the security properties of the BEET mode,
discussing some and point out some of its limitations [[RFC3552]].

There are no known new vulnerabilities that the addition of the BEET
mode to IKEv2 would create.

Since the BEET security associations have the semantics of a fixed,
point-to-point tunnel between two IP addresses, it is possible to
place one or both of the tunnel end points into other network or
nodes but those that actually "possess" the inner IP addresses, i.e.,
to implement a BEET mode proxy. However, since such usage defeats the
security benefits of combined ESP processing, as discussed in
[[I-D.nikander-esp-beet-mode]], the implementations SHOULD NOT
support such usage when used in combination with IKEv2; instead use IKEv2
MOBIKE to move the between networks.


* Implementation Status

[Note to RFC Editor: Please remove this section and the reference to
[[RFC6982]]before publication.]

This section records the status of known implementations of the
protocol defined by this specification at the time of posting of this
Internet-Draft, and is based on a proposal described in [[RFC7942]].
The description of implementations in this section is intended to
assist the IETF in its decision processes in progressing drafts to
RFCs. Please note that the listing of any individual implementation
here does not imply endorsement by the IETF. Furthermore, no effort
has been spent to verify the information presented here that was
supplied by IETF contributors. This is not intended as, and must not
be construed to be, a catalog of available implementations or their
features. Readers are advised to note that other implementations may
exist.

According to [[RFC7942]], "this will allow reviewers and working
groups to assign due consideration to documents that have the benefit
of running code, which may serve as evidence of valuable
experimentation and feedback that have made the implemented protocols
more mature. It is up to the individual working groups to use this
information as they see fit".

Authors are requested to add a note to the RFC Editor at the top of
this section, advising the Editor to remove the entire section before
publication, as well as the reference to [[RFC7942]].


** Linux XFRM

Linux


- Organization: :: Linux kernel Project
- Name: :: Linux Kernel https://www.kernel.org/
- Description: :: Implements BEET mode in ESP. The initial support was added in 2006.
  It is widely used
- Level of maturity: :: Stable and used for over 15 years
- Licensing: :: GPLv2
- Implementation experience: :: There is no support for IPv4 fragments yet. IPv6 fragments appears to
  work. The BEET mode code is in production for over a decade. And it
  appears stable.
- Contact: :: https://lore.kernel.org/netdev/


** strongSwan


- Organization: :: The strongSwan Project
- Name: :: strongSwan
  https://docs.strongswan.org/docs/5.9/swanctl/swanctlConf.html
- Description: :: Implements IKE negotiation and ESP support for BEET mode Linux
- Level of maturity: :: Stable for a long time
- Coverage: :: Implements negotiating BEET mode support in Child SA negotiations and
  using it in ESP. The initial support was added in 2006.
- Licensing: :: GPLv2
- Implementation experience :: strongSwan use a private Notify Message Status Type USE_BEET_MODE
  (40961) for IKE. As far we know BEET is widely used.
- Contact :: Tobias Brunner tobias@strongswan.org


** iproute2


- Organization: :: The iproute2 Project
- Name: :: iproute2 https://git.kernel.org/pub/scm/network/iproute2/iproute2.git
- Description: :: Implements BEET mode support in ESP. e.g. command support "ip xfrm
  policy ... mode beet" . and "ip xfrm state .. mode beet". The
  initial support was added in 2006
- Level of maturity: :: Stable
- Licensing: :: GPLv2
- Implementation experience: :: TBD
- Contact: :: https://lore.kernel.org/netdev/ or Stephen Hemminger
  stephen@networkplumber.org


* Acknowledgment

We extend our sincere gratitude to the authors and contributors who
contributed to the standardization of BEET mode. Their insights and
dedication have significantly influenced our work, as well as their
contributions to the implementation of BEET mode many years ago.


* Normative References

** RFC2119
** RFC7296
** RFC7402

* Informative References

** RFC3552
** RFC6982
** RFC7942
** RFC7401
** RFC9333
** I-D.nikander-esp-beet-mode
** STATUSNOTIFY
:PROPERTIES:
:REF_TARGET: https://www.iana.org/assignments/ikev2-parameters/ikev2-parameters.xhtml#ikev2-parameters-16
:REF_TITLE: IKEv2 Notify Message Status Types
:REF_ORG: IANA
:END:

* Additional Stuff

This becomes an Appendix.


